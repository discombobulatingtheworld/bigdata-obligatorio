name: bigdataproj
services:
  mongo:
    image: mongodb/mongodb-community-server:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    env_file:
      - .env
    hostname: ${MONGO_HOSTNAME}
    ports:
      - ${MONGO_PORT_HOST}:27017
    networks:
      - network
    volumes:
      - mongodata:/data/db
      - mongologs:/var/log/mongodb

  mongo.express:
    image: library/mongo-express:latest
    environment:
      ME_CONFIG_MONGODB_SERVER: ${ME_CONFIG_MONGODB_SERVER}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
    env_file:
      - .env
    ports:
      - ${ME_PORT_HOST}:8081
    depends_on:
      - mongo
    networks:
      - network

  jupyter:
    image: jupyter/pyspark-notebook:latest
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN}
    env_file:
      - .env
    ports:
      - ${JUPYTER_PORT_HOST}:8888
    volumes:
      - jupyterdata:/home/jovyan/work
    networks:
      - network
    command: >
      start-notebook.sh --NotebookApp.token='${JUPYTER_TOKEN}'

  spark.master:
    image: bitnami/spark:latest
    environment:
      SPARK_MODE: master
      SPARK_MASTER_HOST: 0.0.0.0
      SPARK_MASTER_PORT: ${SPARK_MASTER_PORT}
      SPARK_MASTER_WEBUI_PORT: ${SPARK_MASTER_WEBUI_PORT}
      #SPARK_RPC_AUTHENTICATION_ENABLED: no
      #SPARK_RPC_ENCRYPTION_ENABLED: no
      #SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      #SPARK_SSL_ENABLED: no
      # SPARK_MASTER_USERNAME: ${SPARK_MASTER_USERNAME}
      # SPARK_MASTER_PASSWORD: ${SPARK_MASTER_PASSWORD}
    env_file:
      - .env
    hostname: ${SPARK_MASTER_HOSTNAME}
    ports:
      - ${SPARK_MASTER_WEBUI_PORT}:8080
      - ${SPARK_MASTER_PORT_HOST}:7077
    networks:
      - network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  spark.worker.1:
    image: bitnami/spark:latest
    environment:
      SPARK_MASTER_URL: spark://${SPARK_MASTER_HOSTNAME}:${SPARK_MASTER_PORT}
      SPARK_WORKER_MEMORY: 4G
      SPARK_WORKER_CORES: 2
      SPARK_DRIVER_MEMORY: 4G
      SPARK_EXECUTOR_MEMORY: 4G
      SPARK_MODE: worker
    env_file:
      - .env
    ports:
      - ${SPARK_WORKER1_WEBUI_PORT}:8080
    depends_on:
      - spark.master
    networks:
      - network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  spark.worker.2:
    image: bitnami/spark:latest
    environment:
      SPARK_MASTER_URL: spark://${SPARK_MASTER_HOSTNAME}:${SPARK_MASTER_PORT}
      SPARK_WORKER_MEMORY: 4G
      SPARK_WORKER_CORES: 2
      SPARK_DRIVER_MEMORY: 4G
      SPARK_EXECUTOR_MEMORY: 4G
      SPARK_MODE: worker
    env_file:
      - .env
    ports:
      - ${SPARK_WORKER2_WEBUI_PORT}:8080
    depends_on:
      - spark.master
    networks:
      - network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  spark.worker.3:
    image: bitnami/spark:latest
    environment:
      SPARK_MASTER_URL: spark://${SPARK_MASTER_HOSTNAME}:${SPARK_MASTER_PORT}
      SPARK_WORKER_MEMORY: 4G
      SPARK_WORKER_CORES: 2
      SPARK_DRIVER_MEMORY: 4G
      SPARK_EXECUTOR_MEMORY: 4G
      SPARK_MODE: worker
    env_file:
      - .env
    ports:
      - ${SPARK_WORKER3_WEBUI_PORT}:8080
    depends_on:
      - spark.master
    networks:
      - network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.0
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    networks:
      - network
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTICSEARCH_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: ${ELASTICSEARCH_HOSTNAME}\n"\
          "    dns:\n"\
          "      - ${ELASTICSEARCH_HOSTNAME}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: ${KIBANA_HOSTNAME}\n"\
          "    dns:\n"\
          "      - ${KIBANA_HOSTNAME}\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://${ELASTICSEARCH_HOSTNAME}:${ELASTICSEARCH_PORT} | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTICSEARCH_PASSWORD}" -H "Content-Type: application/json" https://${ELASTICSEARCH_HOSTNAME}:${ELASTICSEARCH_PORT}/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/${ELASTICSEARCH_HOSTNAME}/${ELASTICSEARCH_HOSTNAME}.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.0
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      bootstrap.memory_lock: true
      xpack.security.enabled: true
      xpack.security.http.ssl.enabled: true
      xpack.security.http.ssl.key: certs/${ELASTICSEARCH_HOSTNAME}/${ELASTICSEARCH_HOSTNAME}.key
      xpack.security.http.ssl.certificate: certs/${ELASTICSEARCH_HOSTNAME}/${ELASTICSEARCH_HOSTNAME}.crt
      xpack.security.http.ssl.certificate_authorities: certs/ca/ca.crt
      xpack.security.transport.ssl.enabled: true
      xpack.security.transport.ssl.key: certs/${ELASTICSEARCH_HOSTNAME}/${ELASTICSEARCH_HOSTNAME}.key
      xpack.security.transport.ssl.certificate: certs/${ELASTICSEARCH_HOSTNAME}/${ELASTICSEARCH_HOSTNAME}.crt
      xpack.security.transport.ssl.certificate_authorities: certs/ca/ca.crt
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.license.self_generated.type: ${ELASTICSERACH_LICENSE}
      xpack.ml.use_auto_machine_memory_percent: true
    env_file:
      - .env
    hostname: ${ELASTICSEARCH_HOSTNAME}
    ports:
      - ${ELASTICSEARCH_PORT_HOST}:9200
    depends_on:
      setup:
        condition: service_healthy
    volumes:
      - elasticdata:/usr/share/elasticsearch/data
      - certs:/usr/share/elasticsearch/config/certs
    networks:
      - network
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    environment:
      ELASTICSEARCH_HOSTS: https://${ELASTICSEARCH_HOSTNAME}:${ELASTICSEARCH_PORT}
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: ${KIBANA_PASSWORD}
      xpack.security.http.ssl.enabled: true
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: config/certs/ca/ca.crt
      XPACK_SECURITY_ENCRYPTIONKEY: ${KIBANA_XPACK_SECURITY_ENCRYPTIONKEY}
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: ${KIBANA_XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY}
      XPACK_REPORTING_ENCRYPTIONKEY: ${KIBANA_XPACK_REPORTING_ENCRYPTIONKEY}
    env_file:
      - .env
    hostname: ${KIBANA_HOSTNAME}
    ports:
      - ${KIBANA_PORT_HOST}:5601
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    networks:
      - network

networks:
  network:
    driver: bridge

volumes:
  mongodata:
  mongologs:
  jupyterdata:
  elasticdata:
  kibanadata:
  certs:
  sparklogs: